#!/bin/sh
# Universal .git/hooks/prepare-commit-msg

# $1 is the path to the commit message file
# $2 is the type of commit

# Skip LLM processing if we're amending AND no_bypass_amending is not set
if [ "$2" = "commit" ] && git rev-parse --verify HEAD^{commit} >/dev/null 2>&1 && [ -z "$NO_BYPASS_AMENDING" ]; then
    # We're amending - exit without modifying the message
    exit 0
fi

# Force UTF-8 environment (critical for Windows)
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8  # If using Python-based LLM

# ANSI colors for output formatting
RED=$(printf '\033[31m')
GREEN=$(printf '\033[32m')
YELLOW=$(printf '\033[33m')
BLUE=$(printf '\033[34m')
NC=$(printf '\033[0m')

COMMIT_MSG_FILE=$1  # POSIX-compliant parameter handling

# Skip if environment variable is set
[ -n "$SKIP_LLM_GITHOOK" ] && exit 0

# Exit early for merge commits
[ "$2" = "merge" ] || [ -f "$GIT_DIR/MERGE_HEAD" ] && exit 0

# Function to check if `llm` is installed (with Windows support)
check_llm() {
  case "$(uname -s)" in
    Linux*|Darwin*) command -v llm >/dev/null 2>&1 ;;
    CYGWIN*|MINGW*|MSYS*) [ -f "$LLM_PROGRAM" ] && return 0 || return 1;;
    *) return 1 ;;
  esac
}

if ! check_llm; then
  printf "%bError: $LLM_PROGRAM command not found%b\n" "$RED" "$NC" >&2
  printf "%bError: llm command not found%b\n" "$RED" "$NC" >&2
  exit 1
fi

# Function to show a spinner while fetching LLM response
spinner() {
  local spinner_chars="|/-\\"
  while :; do
    for char in $(echo "$spinner_chars" | sed -e 's/\(.\)/\1\n/g'); do
      printf "\r%b%s Generating commit message...%b" "$YELLOW" "$char" "$NC"
      sleep 0.1
    done
  done
}

# Hide cursor to prevent blinking while fetching response
hide_cursor() { printf '\033[?25l'; }
show_cursor() { printf '\033[?25h'; }

# Start spinner in the background
hide_cursor
spinner &
SPIN_PID=$!

# Ensure the spinner and cursor are restored on exit
cleanup() {
  kill -9 $SPIN_PID 2>/dev/null || true
  wait $SPIN_PID 2>/dev/null
  show_cursor
}
trap cleanup EXIT

# Fetch staged diff content
DIFF_CONTENT=$(git diff --staged --no-color --ignore-all-space --diff-algorithm=minimal)

# Check if the 'commit-msg' template exists, create if missing
if ! $LLM_PROGRAM templates show commit-msg &> /dev/null; then
  $LLM_PROGRAM -s "$(cat ~/prompts/git/diff-based-commit-prompt.txt)" --save commit-msg
fi

# Generate commit message with LLM
if ! MSG=$(echo "$DIFF_CONTENT" | $LLM_PROGRAM -t commit-msg | iconv -c -f UTF-8 -t UTF-8 2>&1); then
  printf "\n%bError: 'llm' command failed to generate the commit message:\n%b%s%b\n\nManually set the commit message.\n" "$RED" "$NC" "$MSG" "$NC"
  exit 1
fi

# Stop spinner and restore cursor
cleanup

# Display generated commit message
printf "\r\033[K"
printf "%bGenerated commit message:%b\n" "$GREEN" "$NC"
printf "%b%s%b\n\n" "$YELLOW" "$MSG" "$NC"

# Get user email from git config and AI model info
USER_EMAIL=$(git config --global --get user.email)
AI_MODEL=$(map_model "$(llm models default 2>/dev/null || echo "AI")")

# Write output to commit message file with signed-off-by and co-authored-by footers
{
  echo "$MSG"
  echo ""
  echo "Signed-off-by: $USER_EMAIL"
  echo "Co-Authored-By: $AI_MODEL <noreply@AI>"
} > "$COMMIT_MSG_FILE"
