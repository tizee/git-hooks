#!/bin/sh
# Universal .git/hooks/prepare-commit-msg

# $1 is the path to the commit message file
# $2 is the type of commit

# Skip LLM processing if we're amending AND no_bypass_amending is not set
if [ "$2" = "commit" ] && git rev-parse --verify HEAD^{commit} >/dev/null 2>&1 && [ -z "$NO_BYPASS_AMENDING" ]; then
    # We're amending - exit without modifying the message
    exit 0
fi

# Force UTF-8 environment (critical for Windows)
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8  # If using Python-based LLM

# ANSI colors for output formatting
RED=$(printf '\033[31m')
GREEN=$(printf '\033[32m')
YELLOW=$(printf '\033[33m')
BLUE=$(printf '\033[34m')
NC=$(printf '\033[0m')

COMMIT_MSG_FILE=$1  # POSIX-compliant parameter handling

# Skip if environment variable is set
[ -n "$SKIP_LLM_GITHOOK" ] && exit 0

# Exit early for merge commits
[ "$2" = "merge" ] || [ -f "$GIT_DIR/MERGE_HEAD" ] && exit 0

# Function to check if `llm` is installed (with Windows support)
check_llm() {
  case "$(uname -s)" in
    Linux*|Darwin*) command -v llm >/dev/null 2>&1 ;;
    CYGWIN*|MINGW*|MSYS*) [ -f "$LLM_PROGRAM" ] && return 0 || return 1;;
    *) return 1 ;;
  esac
}

if ! check_llm; then
  printf "%bError: $LLM_PROGRAM command not found%b\n" "$RED" "$NC" >&2
  printf "%bError: llm command not found%b\n" "$RED" "$NC" >&2
  exit 1
fi

if ! [ -f "$LLM_PROGRAM" ]; then
  printf "%bError: $LLM_PREPARE_COMMIT_MSG_PROMPT file not found%b\n" "$RED" "$NC" >&2
  exit 1
fi

# Available spinner styles
SPINNER_STYLES=(
  "classic|/-\\"
  "dots|⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"
  "arrows|←↖↑↗→↘↓↙"
  "blocks|▖▘▝▗"
  "pulse|▁▂▃▄▅▆▇█▇▆▅▄▃▂"
  "bouncing|⠁⠂⠄⡀⢀⠠⠐⠈"
  "circle|◐◓◑◒"
  "square|◰◳◲◱"
  "triangle|◴◵◶◷"
  "diamond|◇◈◆"
)

# Function to get spinner characters based on style
get_spinner_chars() {
  local style_name="${1:-classic}"
  
  for style in "${SPINNER_STYLES[@]}"; do
    if [[ "$style" == "$style_name"* ]]; then
      echo "$style" | cut -d'|' -f2
      return 0
    fi
  done
  
  # Fallback to classic if style not found
  echo "|/-\\"
}

# Function to show a spinner while fetching LLM response
spinner() {
  local style="${GITHOOK_SPINNER:-${SPINNER_STYLE:-classic}}"
  local spinner_chars=$(get_spinner_chars "$style")
  
  while :; do
    for ((i=0; i<${#spinner_chars}; i++)); do
      local char="${spinner_chars:i:1}"
      printf "\r%b%s Generating commit message...%b" "$YELLOW" "$char" "$NC"
      sleep 0.016
    done
  done
}

# Hide cursor to prevent blinking while fetching response
hide_cursor() { printf '\033[?25l'; }
show_cursor() { printf '\033[?25h'; }

# Start spinner in the background
hide_cursor
spinner &
SPIN_PID=$!

# Ensure the spinner and cursor are restored on exit
cleanup() {
  kill -9 $SPIN_PID 2>/dev/null || true
  wait $SPIN_PID 2>/dev/null
  show_cursor
}
trap cleanup EXIT

# Cache files for last commit message
CACHE_DIR="$HOME/.cache/git-llm-prepare-commit-msg"
CACHE_MD5_FILE="$CACHE_DIR/last_md5"
CACHE_MSG_FILE="$CACHE_DIR/last_message"

# Create cache directory
mkdir -p "$CACHE_DIR"

# Function to calculate MD5 for staged changes
get_staged_md5() {
  # Get the diff content and file list
  local diff_content=$(git diff --staged --no-color --ignore-all-space --diff-algorithm=minimal)
  local files_list=$(git diff --staged --name-only | sort | tr '\n' ' ')
  
  # Create MD5 hash of diff content and file list
  echo -n "$diff_content$files_list" | md5sum | cut -d' ' -f1
}

# Check if we should force regeneration
if [ -n "$FORCE_LLM_GITHOOK" ]; then
  printf "%bForcing commit message regeneration...%b\n" "$YELLOW" "$NC"
  REGENERATE=true
else
  # Check if we have cached commit message
  CURRENT_MD5=$(get_staged_md5)
  if [ -f "$CACHE_MD5_FILE" ] && [ -f "$CACHE_MSG_FILE" ]; then
    CACHED_MD5=$(cat "$CACHE_MD5_FILE")
    CACHED_MSG=$(cat "$CACHE_MSG_FILE")
    
    # Check if staged changes match cached
    if [ "$CURRENT_MD5" = "$CACHED_MD5" ]; then
      MSG="$CACHED_MSG"
      printf "%bUsing cached commit message...%b\n" "$YELLOW" "$NC"
      REGENERATE=false
    else
      REGENERATE=true
    fi
  else
    REGENERATE=true
  fi
fi

if [ "$REGENERATE" = true ]; then
  # Fetch staged diff content
  DIFF_CONTENT=$(git diff --staged --no-color --ignore-all-space --diff-algorithm=minimal)

  # Check if the 'commit-msg' template exists, create if missing
  if ! $LLM_PROGRAM templates show commit-msg &> /dev/null; then
    $LLM_PROGRAM -s "$(cat $LLM_PREPARE_COMMIT_MSG_PROMPT)" --save commit-msg
  fi

  # Generate commit message with LLM
  if ! MSG=$(echo "$DIFF_CONTENT" | $LLM_PROGRAM -t commit-msg | iconv -c -f UTF-8 -t UTF-8 2>&1); then
    printf "\n%bError: 'llm' command failed to generate the commit message:\n%b%s%b\n\nManually set the commit message.\n" "$RED" "$NC" "$MSG" "$NC"
    exit 1
  fi

  # Cache the generated message and MD5
  echo "$CURRENT_MD5" > "$CACHE_MD5_FILE"
  echo "$MSG" > "$CACHE_MSG_FILE"
fi

# Stop spinner and restore cursor
cleanup

# Display generated commit message
printf "\r\033[K"
printf "%bGenerated commit message:%b\n" "$GREEN" "$NC"
printf "%b%s%b\n\n" "$YELLOW" "$MSG" "$NC"

# Strict model name mapping without explanations
map_llm_model_name() {
    case $1 in
        "doubao-v3") echo "deepseek-v3" ;;
        "doubao-r1") echo "deepseek-r1" ;;
        "siliconflow-r1") echo "deepseek-r1" ;;
        "siliconflow-v3") echo "deepseek-v3" ;;
        "hyperbolic-v3") echo "deepseek-v3" ;;
        "deepseek-chat") echo "deepseek-v3" ;;
        "deepseek-reasoner") echo "deepseek-r1" ;;
        *) echo "$1" ;;  # Fallthrough for unmapped names
    esac
}

# Get user email from git config and AI model info
USER_EMAIL=$(git config --global --get user.email)
AI_MODEL=$(map_llm_model_name "$(llm models default 2>/dev/null || echo "AI")")

# Write output to commit message file with signed-off-by and co-authored-by footers
{
  echo "$MSG"
  echo ""
  echo "Signed-off-by: $USER_EMAIL"
  echo "Co-Authored-By: $AI_MODEL <noreply@$AI_MODEL>"
} > "$COMMIT_MSG_FILE"
